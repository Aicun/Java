package concurrency.awt;

import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Random;

import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JPanel;

public class SwingThreadTest {
	
	class SwingThreadFrame extends JFrame{
		
		public SwingThreadFrame(){
			setTitle("SwingFrameTest");
			
			final JComboBox combo = new JComboBox();
			combo.insertItemAt(Integer.MAX_VALUE, 0);
			combo.setPrototypeDisplayValue(combo.getItemAt(0));
			combo.setSelectedIndex(0);
			
			JPanel panel = new JPanel();
			
			JButton goodButton = new JButton("good");
			goodButton.addActionListener(new ActionListener(){

				@Override
				public void actionPerformed(ActionEvent e) {
					new Thread(new GoodWorkerRunnable(combo)).start();
				}
				
			});
		}
	}

	
	class GoodWorkerRunnable implements Runnable {

		private JComboBox combo;
		private Random random;

		public GoodWorkerRunnable(JComboBox combo) {
			this.combo = combo;
			random = new Random();
		}

		@Override
		public void run() {
			try {
				while (true) {
					EventQueue.invokeLater(new Runnable() {

						@Override
						public void run() {
							int i = Math.abs(random.nextInt());
							if (i % 2 == 0)
								combo.insertItemAt(i, 0);
							else if (combo.getItemCount() > 0)
								combo.removeItemAt(i % combo.getItemCount());
						}

					});
					Thread.sleep(1);
				}
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}

	}

	class BadWorkerRunnable implements Runnable {

		private JComboBox combo;
		private Random random;

		public BadWorkerRunnable(JComboBox combo) {
			this.combo = combo;
			random = new Random();
		}

		@Override
		public void run() {
			try {
				while (true) {
					int i = Math.abs(random.nextInt());
					if (i % 2 == 0)
						combo.insertItemAt(i, 0);
					else if (combo.getItemCount() > 0)
						combo.removeItemAt(i % combo.getItemCount());
					Thread.sleep(1);
				}
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}

	}
}
