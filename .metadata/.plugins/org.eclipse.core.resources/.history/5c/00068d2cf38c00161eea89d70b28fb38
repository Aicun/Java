package com.lac.codility;

import java.util.HashMap;
import java.util.Map;
import java.util.Queue;
import java.util.Stack;

public class CodilityStack {
	public static void main(String[] args) {
		String s = "([)()]";
		//String s = "())";
		int isNested = nested2(s);
		System.out.println(isNested);
	}
	
	public static int fish(int[] a, int[] b){
		Stack<Integer> up = new Stack<Integer>();
		Queue<Integer> down = new Queue<Integer>();
		int length = b.length;
		for(int i=0;i<length;i++){
			if(i==0) up.push(i);
			else down.add(i);
		}
		int firstDown = down.poll();
		int lastUp = up.pop();
	}

	public static int nested(String s){
		int length = s.length();
		int count = 0;
		Stack<Integer> stack = new Stack<Integer>();
		for(int i=0;i<length;i++){
			char c = s.charAt(i);
			if(c=='(')
				stack.push(1);
			else{
				if(stack.size() == 0){
					return 0;
				}else{
					stack.pop();				
				}
			}
		}
		if(stack.size()==0)
			count =1;
		return count;
	}
	
	public static int nested2(String s){
		Map<Character,Character> map = new HashMap<Character,Character>();
		map.put(')', '(');
		map.put(']', '[');
		map.put('}', '{');
		int length = s.length();
		Stack<Character> stack = new Stack<Character>();
		for(int i=0;i<length;i++){
			char c = s.charAt(i);
			if(c=='(' || c=='[' || c=='{')
				stack.push(c);
			else{
				if(stack.size()==0)
					return 0;
				else{
					char last = stack.pop();
					char pair = map.get(c);
					if(last != pair)
						return 0;
				}
			}
		}
		return stack.size()==0?1:0;
	}
}
