package nio;

import java.io.IOException;
import java.nio.file.CopyOption;
import java.nio.file.FileSystemLoopException;
import java.nio.file.FileVisitOption;
import java.nio.file.FileVisitResult;
import java.nio.file.FileVisitor;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.nio.file.attribute.BasicFileAttributes;
import java.nio.file.attribute.FileTime;
import java.util.EnumSet;

public class Copy {

	static void copyFile(Path source, Path target, boolean prompt,
			boolean preserve) {
		CopyOption[] options = (preserve) ? new CopyOption[] {
				StandardCopyOption.COPY_ATTRIBUTES,
				StandardCopyOption.REPLACE_EXISTING }
				: new CopyOption[] { StandardCopyOption.REPLACE_EXISTING };

		try {
			Files.copy(source, target, options);
		} catch (IOException e) {
			e.printStackTrace();
			System.err.format("Unable to copy: %s: %s%n", source, e);
		}
	}

	static class TreeCopier implements FileVisitor<Path> {

		private final Path source;
		private final Path target;
		private final boolean prompt;
		private final boolean preserve;

		TreeCopier(Path source, Path target, boolean prompt, boolean preserve) {
			this.source = source;
			this.target = target;
			this.prompt = prompt;
			this.preserve = preserve;
		}

		@Override
		public FileVisitResult preVisitDirectory(Path dir,
				BasicFileAttributes attrs) {

			try {
				Files.copy(source, target,
						new CopyOption[] { StandardCopyOption.COPY_ATTRIBUTES });
			} catch (IOException e) {
				System.err.format("Unable to create: %s: %s%n", target, e);
				return FileVisitResult.SKIP_SUBTREE;
			}

			return FileVisitResult.CONTINUE;
		}

		@Override
		public FileVisitResult visitFile(Path file, BasicFileAttributes attrs)
				throws IOException {
			copyFile(file, target.resolve(source.relativize(file)), prompt, preserve);
			return FileVisitResult.CONTINUE;
		}

		@Override
		public FileVisitResult visitFileFailed(Path file, IOException exc)
				throws IOException {
			if (exc instanceof FileSystemLoopException) {
				System.err.println("cycle detected: " + file);
			} else {
				System.err.format("Unable to copy: %s: %s%n", file, exc);
			}
			return FileVisitResult.CONTINUE;
		}

		@Override
		public FileVisitResult postVisitDirectory(Path dir, IOException exc)
				throws IOException {
			if(exc == null && preserve) {
				Path newdir =  target.resolve(source.relativize(dir));
				try {
                    FileTime time = Files.getLastModifiedTime(dir);
                    Files.setLastModifiedTime(newdir, time);
                } catch (IOException x) {
                    System.err.format("Unable to copy all attributes to: %s: %s%n", newdir, x);
                }
			}
			return FileVisitResult.CONTINUE;
		}

	}
	
	  public static void main(String[] args) throws IOException {
	        boolean recursive = true;
	        boolean prompt = true;
	        boolean preserve = true;

	        // process options
	        int argi = 0;
	        /*while (argi < args.length) {
	            String arg = args[argi];
	            if (!arg.startsWith("-"))
	                break;
	            if (arg.length() < 2)
	                //usage();
	            for (int i=1; i<arg.length(); i++) {
	                char c = arg.charAt(i);
	                switch (c) {
	                    case 'r' : recursive = true; break;
	                    case 'i' : prompt = true; break;
	                    case 'p' : preserve = true; break;
	                    default : break;
	                }
	            }
	            argi++;
	        }*/

	        // remaining arguments are the source files(s) and the target location
	        int remaining = args.length - argi;
	        if (remaining < 2){}
	           //usage();
	        Path[] source = new Path[remaining-1];
	        int i=0;
	        while (remaining > 1) {
	            source[i++] = Paths.get(args[argi++]);
	            remaining--;
	        }
	        Path target = Paths.get(args[argi]);

	        // check if target is a directory
	        boolean isDir = Files.isDirectory(target);

	        // copy each source file/directory to target
	        for (i=0; i<source.length; i++) {
	            Path dest = (isDir) ? target.resolve(source[i].getFileName()) : target;

	            if (recursive) {
	                // follow links when copying files
	                EnumSet<FileVisitOption> opts = EnumSet.of(FileVisitOption.FOLLOW_LINKS);
	                TreeCopier tc = new TreeCopier(source[i], dest, prompt, preserve);
	                Files.walkFileTree(source[i], opts, Integer.MAX_VALUE, tc);
	            } else {
	                // not recursive so source must not be a directory
	                if (Files.isDirectory(source[i])) {
	                    System.err.format("%s: is a directory%n", source[i]);
	                    continue;
	                }
	                copyFile(source[i], dest, prompt, preserve);
	            }
	        }
	    }
}
