package com.lac.codility;

import java.util.Stack;

public class CodilityLeader {

	public static void main(String[] args) {
		int[] a = {4,3,4};
		int index = dominator2(a);
		System.out.println(index);		
	}
	
	public static int equiLeader(int []a){
		int length = a.length;
		int count =0;
		int value = 0;
		for(int i=0;i<length;i++){
			if(count==0){
				count++;
				value = a[i];
			}else{
				if(a[i]!=value){
					count--;
				}else{
					count++;
				}
			}
		}
		int number = 0;
		Stack<Integer> stack = new Stack<Integer>();
		if(count>0){
			for(int i=0;i<length;i++){
				if(a[i]==value){
					number++;
					stack.push(i);
				}
			}
		}
		if(number > length/2){
			int equiLeaderCount = 0;
			int rightCount = 0;
			int rightElements = 0;
			int leftCount = 0;
			int leftElements = 0;
			while(stack.size()>0){
				int index = stack.pop();
				rightCount++;
				leftCount = number-rightCount;
				leftElements = index+1;
				rightElements = lenght - leftElements;
			}
		}
	}
	
	public static int dominator2(int a[]){
		int length = a.length;
		int count =0;
		int value = 0;
		for(int i=0;i<length;i++){
			if(count==0){
				count++;
				value = a[i];
			}else{
				if(a[i]!=value){
					count--;
				}else{
					count++;
				}
			}
		}
		int number = 0;
		int index = -1;
		if(count>0){
			for(int i=0;i<length;i++){
				if(a[i]==value){
					number++;
					index = i;
				}
			}
		}
		if(number <= length/2){
			index = -1;
		}
		return index;
	}
	
	public static int dominator(int[] a){
		Stack<Integer> stack = new Stack<Integer>();
		int length = a.length;
		int index = -1;
		for(int i=0;i<length;i++){
			if(stack.size()==0){
				stack.push(a[i]);
			}else{
				int previous = stack.peek();
				if(a[i]!=previous){
					stack.pop();
				}else{
					stack.push(a[i]);
				}
			}
		}
		int count = 0;
		if(stack.size()>0){
			int dominator = stack.pop();
			for(int i=0;i<length;i++){
				if(a[i]==dominator){
					index = i;
					count ++;
				}
			}
			if(count <= length/2){
				index = -1;
			}
		}
		return index;
	}
}
