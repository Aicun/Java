package com.lac.solutions;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Random;
import java.util.Set;

public class Condorcet {

	//private static int BALLOT_BOUND = 501;
	//private static int CANDIDATE_BOUND = 2501;
	
	private static int WIN = 1;
	private static int LOST = 0;
	private static int SELF = -1;
	
	private static int BALLOT_BOUND = 10;
	private static int CANDIDATE_BOUND = 10;

	private Random random;
	
	public Condorcet() {
		random = new Random();
	}

	//random number of voters
	public int randomBallots() {
		return random.nextInt(BALLOT_BOUND);
	}

	//random number of candidates
	public int randomCandidates() {
		return random.nextInt(CANDIDATE_BOUND);
	}

	public Integer[][] generateBallots(int numberOfBallots, int numberOfCandidates) {
		Integer ballots[][] = new Integer[numberOfBallots][numberOfCandidates];
		for (int i = 0; i < numberOfBallots; i++) {
			List<Integer> candidates = generateCandidates(numberOfCandidates);
			//for each voter, select his/her preference of candidate order
			for (int j = 0; j < numberOfCandidates; j++)
				ballots[i][j] = selectCandidate(candidates);
		}
		writeArrayToFile(ballots);
		return ballots;
	}

	public Integer[][] generateFinalResult (int numberOfBallots, int numberOfCandidates,
			Integer ballots[][]) {
		Integer metrix[][] = new Integer[numberOfCandidates][numberOfCandidates];
		Map<Integer,Integer> candidateOrder = null;
		Integer ballot[];
		List<Integer> candidates = generateCandidates(numberOfCandidates);
		for(int i=0;i<ballots.length;i++){
			ballot = ballots[i];
			candidateOrder = getCandidateOrder(ballot,candidates);
			Integer pairMetrix[][] = countPairWise(numberOfCandidates,candidateOrder);
		}
	}
	
	//in one ballot, decide who is the winner and who lost the vote
	private Integer[][] countPairWise(int numberOfCandidates,Map<Integer,Integer> candidateOrder) {
		Integer metrix[][] = new Integer[numberOfCandidates][numberOfCandidates];
		for(int i=0;i<metrix.length;i++){
			//get the runner candidate order in the ballot;
			int runnerIndex = candidateOrder.get(i);
			for(int j=0;j<metrix[i].length;j++){
				if(i==j) metrix[i][j] = SELF;
				else{
					int opponentIndex = candidateOrder.get(j);
					if(runnerIndex < opponentIndex)
						metrix[i][j] = WIN;
					else
						metrix[i][j] = LOST;
				}
			}
		}
		return metrix;
	}
	
	
	
	// what is the candidate's order in one ballot
	private Map<Integer,Integer> getCandidateOrder(Integer ballot[],List<Integer> candidates) {
		Map<Integer,Integer> candidateOrder = new HashMap<Integer,Integer>();
		List<Integer> ballotList = Arrays.asList(ballot);
		for(int i=0;i<candidates.size();i++){
			int candidate = candidates.get(i);
			int index = ballotList.indexOf(candidate);
			candidateOrder.put(candidate, index);
		}
		return candidateOrder;
	}

/*	private boolean hasWinner(Map<Integer, Integer> result) {
		boolean hasWinner = false;
		Set<Entry<Integer, Integer>> candidateCount = result.entrySet();
		Object[] cc = candidateCount.toArray();
		if (cc.length >= 2) {
			Entry<Integer, Integer> candidate1 = (Entry<Integer, Integer>) cc[0];
			Entry<Integer, Integer> candidate2 = (Entry<Integer, Integer>) cc[1];
			int cc1 = candidate1.getValue();
			int cc2 = candidate2.getValue();
			if (cc1 > cc2) {
				hasWinner = true;
				System.out.println("the winner is " + candidate1.getKey());
			}
		} else {
			Entry<Integer, Integer> candidate1 = (Entry<Integer, Integer>) cc[0];
			System.out.println("the winner is " + candidate1.getKey());
			hasWinner = true;
		}
		return hasWinner;
	}*/

	//generate candidate list according to the number of candidates
	private List<Integer> generateCandidates(int numberOfCandidates) {
		List<Integer> candidates = new ArrayList<Integer>();
		for (int i = 0; i < numberOfCandidates; i++)
			candidates.add(i);
		return candidates;
	}

	//select candidate from the candidate list
	private int selectCandidate(List<Integer> candidates) {
		int length = candidates.size();
		int index = random.nextInt(length);
		int selected = candidates.get(index);
		candidates.remove(index);
		return selected;
	}

	private void writeArrayToFile(Integer[][] ballots) {
		File f = new File("D:\\ballots.txt");
		BufferedWriter outputWriter = null;
		try {
			outputWriter = new BufferedWriter(new FileWriter(f));

			for (int i = 0; i < ballots.length; i++) {
				for (int j = 0; j < ballots[i].length; j++) {
					outputWriter.write(ballots[i][j] + "\t");
				}
				outputWriter.newLine();
			}
			outputWriter.flush();
			outputWriter.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public static void main(String[] args) {
		Condorcet cond = new Condorcet();
		/*int numberOfBallots = cond.randomBallots();
		int numberOfCandidates = cond.randomCandidates();
		System.out.println("numberOfBallots "+numberOfBallots);
		System.out.println("numberOfCandidates "+numberOfCandidates);
		if(numberOfBallots ==0 || numberOfCandidates == 0) return;
		int ballots[][] = cond.generateBallots(numberOfBallots,	numberOfCandidates);*/
		Integer ballots[][] = {
				{5,	2,	4,	1,	3,	0},
				{0,	5,	3,	4,	1,	2},
				{3,	1,	4,	0,	5,	2},
				{1,	2,	0,	4,	5,	3}
		};
		Integer result[][] = cond.generateFinalResult(4,6,ballots);
		for(int i=0;i<result.length;i++){
			for(int j=0;j<result[i].length;j++) {
				System.out.print(result[i][j] + " ");
			}
			System.out.println();
		}
		//cond.findWinner(numberOfBallots,numberOfCandidates,ballots);
		//cond.findWinner(4,6,ballots);
	}
}
