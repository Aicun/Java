package nio;

import java.io.IOException;
import java.nio.file.CopyOption;
import java.nio.file.FileVisitResult;
import java.nio.file.FileVisitor;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardCopyOption;
import java.nio.file.attribute.BasicFileAttributes;

public class Copy {

	static void copyFile(Path source,Path target,boolean prompt,boolean preserve){
		CopyOption[] options = (preserve) ?
		            new CopyOption[] { StandardCopyOption.COPY_ATTRIBUTES, StandardCopyOption.REPLACE_EXISTING } :
		            new CopyOption[] { StandardCopyOption.REPLACE_EXISTING };
		
		try {
			Files.copy(source, target,options);
		} catch (IOException e) {
			e.printStackTrace();
			System.err.format("Unable to copy: %s: %s%n", source, e);
		}
	}

	static class TreeCopier implements FileVisitor<Path> {

		private final Path source;
		private final Path target;
		private final boolean prompt;
		private final boolean preserve;

		TreeCopier(Path source, Path target, boolean prompt, boolean preserve) {
			this.source = source;
			this.target = target;
			this.prompt = prompt;
			this.preserve = preserve;
		}

		@Override
		public FileVisitResult preVisitDirectory(Path dir,
				BasicFileAttributes attrs) {

			try {
				Files.copy(source, target,
						new CopyOption[] { StandardCopyOption.COPY_ATTRIBUTES });
			} catch (IOException e) {
				System.err.format("Unable to create: %s: %s%n", target, e);
				return FileVisitResult.SKIP_SUBTREE;
			}

			return FileVisitResult.CONTINUE;
		}

		@Override
		public FileVisitResult visitFile(Path file, BasicFileAttributes attrs)
				throws IOException {
			copyFile(source,target,prompt,preserve);
			return null;
		}

		@Override
		public FileVisitResult visitFileFailed(Path file, IOException exc)
				throws IOException {
			// TODO Auto-generated method stub
			return null;
		}

		@Override
		public FileVisitResult postVisitDirectory(Path dir, IOException exc)
				throws IOException {
			// TODO Auto-generated method stub
			return null;
		}

	}
}
