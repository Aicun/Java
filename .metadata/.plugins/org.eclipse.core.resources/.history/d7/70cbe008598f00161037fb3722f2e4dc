package com.lac.codility;

import java.util.ArrayList;
import java.util.List;

public class CodilityPrimeComposit {

	public static void main(String[] args) {
		//int factors = countFactors(24);
		int a[] = {1,5,3,4,3,4,1,2,3,4,6,2};
		int flags = flags(a);
		System.out.println(factors);
	}
	
	public static int flags(int[] a){
		int length = a.length;
		List<Integer> peeks = new ArrayList<Integer>();
		for(int i=1;i<length-1;i++){
			if(a[i]>a[i-1] && a[i]>a[i+1]){
				peeks.add(i);
			}
		}
		int peeksCount = peeks.size();
		int peeksDistance[] = new int[peeksCount-1];
		for(int i=1;i<peeksCount;i++){
			peeksDistance[i-1] = peeks.get(i)-peeks.get(i-1);
		}
		
		int maxDistance = Integer.MIN_VALUE;
		int minDistance = Integer.MAX_VALUE;
		
		for(int i:peeksDistance){
			maxDistance = Math.max(i, maxDistance);
			minDistance = Math.min(i,minDistance);
		}
		return 0;		
	}
	
	public static int countFactors(int n){
		int count = 0;
		int i=1;
		int sqrt = (int) Math.sqrt(n);
		while(i<=sqrt){
			if(n%i==0){
				count = count+2;
			}
			i++;
		}
		if(sqrt*sqrt==n) count--;
		return count;
	}
	
	public static int minPerimeterRectangle(int n){
		int i=1;
		int min = Integer.MAX_VALUE;
		int perimeter = 0;
		while(i*i<=n){
			if(n % i == 0){
				int other = n/i;
				perimeter = 2*(i+other);
				perimeter = Math.min(min, perimeter);
			}
			i++;
		}
		return perimeter;
	}

}
