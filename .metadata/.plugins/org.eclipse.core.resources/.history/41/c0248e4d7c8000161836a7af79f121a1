package com.lac.spring.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.lac.spring.dao.SpittleRepository;
import com.lac.spring.po.Spittle;

@Controller
@RequestMapping("/spittles")
public class SpittleController {

	@Autowired
	private SpittleRepository spittleRepository;

	public SpittleController(SpittleRepository spittleRepository) {
		this.spittleRepository = spittleRepository;
	}

	// @RequestMapping(method = RequestMethod.GET)
	public String spittles(Model model) {
		// without specifying a key, the key is inferred from the type of object
		// being set as the value
		model.addAttribute(spittleRepository.findSpittles(Long.MAX_VALUE, 20));
		// model.addAttribute("spittleList",spittleRepository.findSpittles(Long.MAX_VALUE,
		// 20));
		return "spittles";
	}

	// When a handler method returns an object or a collection like this, the
	// value returned is put
	// into the model, and the model key is inferred from its type (spittleList,
	// as in the
	// other examples),view name is inferred from the request path,Because this
	// method handles GET requests for /spittles, the view name is spittles
	@RequestMapping(method = RequestMethod.GET)
	public List<Spittle> spittles(
			@RequestParam(value = "max", defaultValue = "10000") long max,
			@RequestParam(value = "count", defaultValue = "20") int count) {
		return spittleRepository.findSpittles(max, count);
	}

	// If no value attribute is given for @PathVariable, it assumes the
	// placeholder’s name is
	// the same as the method parameter name.
	@RequestMapping(value = "/{spittleId}", method = RequestMethod.GET)
	public String spittles(@PathVariable("spittleId") long spittleId,
			Model model) {
		model.addAttribute(spittleRepository.findOne(spittleId));
		return "spittle";
	}

	@RequestMapping(value = "/register", method = RequestMethod.GET)
	public String showRegistrationForm() {
		return "registerForm";
	}

	@RequestMapping(value = "/register", method = RequestMethod.POST)
	public String handleRegistrationForm(Spittle spittle) {
		spittleRepository.save(spittle);
		return "redirect:/spittles/" + spittle.getId();
	}

	public String showSpitterProfile(@PathVariable long userId, Model model) {
		Spittle spittle = spittleRepository.findOne(userId);
		model.addAttribute(spitter);
		return "profile";
	}
}
