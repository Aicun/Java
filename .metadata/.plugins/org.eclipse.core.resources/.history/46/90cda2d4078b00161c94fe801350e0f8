package com.lac.codility;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;

public class Iterator {
	public static void main(String[] args) {
		int steps = steps(10,85,30);
		System.out.println(steps);
	}
	
	public static int steps(int X,int Y,int D){
		int gap = Y-X;
		System.out.println(((double)gap/D);
		int steps = (int) Math.ceil(gap/D);
		return steps;
	}
	
	public static int minimal(int A[]){
		int sumA  = 0;
		int length = A.length;
		int sumLeft = 0;
		int sumRight = 0;
		for (int i=0;i<length;i++){
			sumA +=A[i];
		}
		int []a = new int[length-1];
		for(int i=0;i<length-1;i++){
			sumLeft+=A[i];
			sumRight= sumA-sumLeft;
			int abs = Math.abs(sumLeft-sumRight);
			a[i] = abs;
		}
		
		Arrays.sort(a);
		return a[0];
	}
	
	public static int pair(int[] A){
		Map<Integer,Integer> map = new HashMap<Integer,Integer>();
		int result =-1;
		for(int i=0;i<A.length;i++){
			int value = A[i];
			if(map.containsKey(value)){
				int count = map.get(value);
				map.put(value, count+1);
			}else{
				map.put(value, 1);
			}
		}
		for(Entry<Integer, Integer> set:map.entrySet()){
			int count = set.getValue();
			if(count %2 == 1){
				result = set.getKey();
			}
		}
		return result;
	}
	
	public static int[] solution(int[] a, int k) {
		int length = a.length;
		if(length==0) return a;
		int move = k % length;
		if(move==0) return a;
		int[] temp = new int[move];
		for(int i=0;i<move;i++){
			temp[i] = a[length-move+i];
		}
		for(int i=length-move-1;i>=0;i--){
			a[i+move] = a[i];
		}
		for(int i=0;i<move;i++){
			a[i] = temp[i];
		}
		return a;
	}
	
	public static int binaryGap(int n){
		String binary = Integer.toBinaryString(n);
		System.out.println(binary);
		int length = binary.length();
		int gap = 0;
		int tempGap = 0;
		if(binary.lastIndexOf('1')==0)
			return gap;
		for(int i=1;i<length;i++){
			if(binary.charAt(i)=='0'){
				tempGap++;
			}
			else{
				if(tempGap>gap){
					gap = tempGap;
				}
				tempGap =0;
			}
		}
		return gap;
	}
}
